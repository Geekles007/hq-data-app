# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Atelier {
  createdAt: DateTime
  createdBy: User!
  id: ID!
  name: String!
  reference: String!
  region: Region!
  updatedAt: DateTime
  updatedBy: User!
}

type Borehole {
  cost: Float
  createdAt: DateTime
  createdBy: User!
  date: String
  debitCube: Float
  debitCubeH: Float
  depth: Float
  doneBy: String
  id: ID!
  location: String
  observation: String
  pompe: String
  reference: String!
  site: Site
  updatedAt: DateTime
  updatedBy: User!
}

type Brand {
  createdAt: DateTime
  createdBy: User!
  id: ID!
  name: String!
  updatedAt: DateTime
  updatedBy: User!
}

type Clim {
  atelier: Atelier
  brand: Brand
  createdAt: DateTime
  createdBy: User!
  id: ID!
  place: Place
  power: Float!
  reference: String!
  state: Etat!
  updatedAt: DateTime
  updatedBy: User!
}

type Connected {
  access_token: String!
  email: String!
}

input CreateAtelierInput {
  id: String
  name: String = ""
  reference: String = ""
  regionId: String
}

input CreateBoreholeInput {
  cost: Float = 0
  date: String = "2021-11-06T13:25:50.651+03:00"
  debitCube: Float = 0
  debitCubeH: Float = 0
  depth: Float = 0
  doneBy: String = ""
  id: String
  location: String = ""
  observation: String = ""
  pompe: String = ""
  reference: String = ""
  siteId: String
}

input CreateBrandInput {
  id: String
  name: String = ""
}

input CreateClimInput {
  atelierId: String
  brandId: String
  etat: String = "n"
  id: String
  placeId: String
  power: Float = 0
  reference: String = ""
}

input CreateGeneratorInput {
  brandId: String
  id: String
  numSeries: String = ""
  observation: String = ""
  power: Float = 0
  reference: String = ""
  siteId: String
  state: Boolean = true
}

input CreateGroupInput {
  id: String
  name: String = ""
  siteId: String
}

input CreatePlaceInput {
  id: String
  name: String = ""
  siteId: String
}

input CreateRegionInput {
  id: String
  name: String = ""
}

input CreateSiteInput {
  id: String
  name: String = ""
  reference: String = ""
  regionId: String
}

input CreateUserInput {
  blocked: Boolean
  email: String
  firstname: String
  id: String
  lastname: String
  password: String = ""
  username: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Etat {
  n
  o
}

type Generator {
  brand: Brand
  createdAt: DateTime
  createdBy: User!
  id: ID!
  numSeries: String!
  observation: String
  power: Float
  reference: String!
  site: Site
  state: State
  updatedAt: DateTime
  updatedBy: User!
}

type Group {
  createdAt: DateTime
  createdBy: User!
  id: ID!
  name: String!
  site: Site
  updatedAt: DateTime
  updatedBy: User!
}

type Mutation {
  createOrEditAtelier(input: CreateAtelierInput!): Atelier!
  createOrEditBorehole(input: CreateBoreholeInput!): Borehole!
  createOrEditBrand(input: CreateBrandInput!): Brand!
  createOrEditClim(input: CreateClimInput!): Clim!
  createOrEditGenerator(input: CreateGeneratorInput!): Generator!
  createOrEditGroup(input: CreateGroupInput!): Group!
  createOrEditPlace(input: CreatePlaceInput!): Place!
  createOrEditRegion(input: CreateRegionInput!): Region!
  createOrEditSite(input: CreateSiteInput!): Site!
  createOrEditUser(input: CreateUserInput!): User!
  deleteAteliers(ids: [ID!]!): Boolean!
  deleteBoreholes(ids: [ID!]!): Boolean!
  deleteBrands(ids: [ID!]!): Boolean!
  deleteClims(ids: [ID!]!): Boolean!
  deleteGenerators(ids: [ID!]!): Boolean!
  deleteGroups(ids: [ID!]!): Boolean!
  deletePlaces(ids: [ID!]!): Boolean!
  deleteRegions(ids: [ID!]!): Boolean!
  deleteSites(ids: [ID!]!): Boolean!
  deleteUsers(ids: [ID!]!): Boolean!
  signIn(login: String!, password: String!): Connected!
}

type PaginateAtelierResult {
  count: Float!
  data: [Atelier!]!
}

type PaginateBoreholeResult {
  count: Float!
  data: [Borehole!]!
}

type PaginateBrandResult {
  count: Float!
  data: [Brand!]!
}

type PaginateClimResult {
  count: Float!
  data: [Clim!]!
}

type PaginateGeneratorResult {
  count: Float!
  data: [Generator!]!
}

type PaginateGroupResult {
  count: Float!
  data: [Group!]!
}

type PaginatePlaceResult {
  count: Float!
  data: [Place!]!
}

type PaginateResult {
  count: Float!
  data: [Region!]!
}

type PaginateSiteResult {
  count: Float!
  data: [Site!]!
}

type PaginateUserResult {
  count: Float!
  data: [User!]!
}

type Place {
  createdAt: DateTime
  createdBy: User!
  id: ID!
  name: String!
  site: Site
  updatedAt: DateTime
  updatedBy: User!
}

type Query {
  findAllAtelier(after: Float!, first: Float!): PaginateAtelierResult!
  findAllBorehole(after: Float!, first: Float!): PaginateBoreholeResult!
  findAllBrand(after: Float!, first: Float!): PaginateBrandResult!
  findAllClim(after: Float!, first: Float!): PaginateClimResult!
  findAllGenerator(after: Float!, first: Float!): PaginateGeneratorResult!
  findAllGroup(after: Float!, first: Float!): PaginateGroupResult!
  findAllPlace(after: Float!, first: Float!): PaginatePlaceResult!
  findAllRegion(after: Float!, first: Float!): PaginateResult!
  findAllSite(after: Float!, first: Float!): PaginateSiteResult!
  findAllUser(after: Float!, first: Float!): PaginateUserResult!
  findAtelierById(id: String!): Atelier!
  findBoreholeById(id: String!): Borehole!
  findBrandById(id: String!): Brand!
  findClimById(id: String!): Clim!
  findGeneratorById(id: String!): Generator!
  findGroupById(id: String!): Group!
  findPlaceById(id: String!): Place!
  findRegionById(id: String!): Region!
  findSiteById(id: String!): Site!
  findUserById(id: String!): User!
}

type Region {
  createdAt: DateTime
  createdBy: User!
  id: ID!
  name: String!
  updatedAt: DateTime
  updatedBy: User!
}

type Site {
  createdAt: DateTime
  createdBy: User!
  id: ID!
  name: String!
  reference: String!
  region: Region!
  updatedAt: DateTime
  updatedBy: User!
}

enum State {
  f
  p
}

type User {
  blocked: Boolean
  createdAt: DateTime
  email: String!
  firstname: String!
  id: ID!
  lastname: String!
  password: String!
  token: String
  updatedAt: DateTime
  username: String!
}
